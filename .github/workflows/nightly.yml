name: Nightly CI

on:
  push:
    paths:
      - "src/**"
      - "include/**"
      - "Makefile.fpc"
      - "Makefile"
      - ".github/workflows/nightly.yml"

  pull_request:
    paths:
      - "src/**"
      - "include/**"
      - "Makefile.fpc"
      - "Makefile"
      - ".github/workflows/nightly.yml"

  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Install compiler (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install fp-{compiler,units-{base,rtl,fcl,misc}} -y --no-install-recommends

      - name: Install compiler (Windows)
        if: ${{ matrix.os != 'ubuntu-latest' }}
        uses: lebao3105/setup-lazarus@master
      
      # - name: Install compiler (macOS)
      #   if: ${{ matrix.os == 'macos-latest' }}
      #   run: |
      #     brew update
      #     brew upgrade
      #     brea install fpc-laz

      - name: Download fcl-jsonschema
        working-directory: build-aux
        run: |
          curl -o fcl-jsonschema.tar "https://gitlab.com/freepascal.org/fpc/source/-/archive/main/source-main.tar?ref_type=heads&path=packages/fcl-jsonschema"
          tar -xf fcl-jsonschema.tar
          fpc -gl -Fusource-main-packages-fcl-jsonschema/packages/fcl-jsonschema/src/ fpmake.pp

      - name: Build all projects (UNIX)
        working-directory: build-aux
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          DEBUG: 1
        run: |
          ./fpmake build
        
      - name: Build all projects (Windows)
        working-directory: build-aux
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          DEBUG: 1
        run: |
          .\fpmake.exe build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/bin/*
          if-no-files-found: error
          name: Commands Collection (Nightly) for ${{ matrix.os }}

  publish:
    runs-on: ubuntu-latest
    
    needs: build
    
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5

      - name: Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          gh release view nightly && gh release delete nightly -y --cleanup-tag
          gh release create nightly "Commands Collection*" --generate-notes -p -t Nightly
